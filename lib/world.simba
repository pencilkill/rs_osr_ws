(*
World
====

Supporting world functions.

.. contents::

*)

type
  TWorldColor = record
    group : String;                 // world group
    number : Integer;                // world number
    box : TBox;                      // world box
    color, bcolor, percent: Integer; // world color, background color, background color percent
  end;

var
  WORLD_DAT := WS_ASSETS_PATH + '\world.dat';
  WORLD_DAT_MAIN := 'main';

(*
GetWorldNumber
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure GetWorldNumber;

Get the world number

.. note::

    by sam

Example:

  .. code-block:: pascal
*)
function GetWorldNumber(box: TBox; color, bcolor, percent: Integer) : Integer;
var
  tpa: TPointArray;
  txt: String;
begin
  // group background color match, e.g. : member ~= clYellow, 25% or more
  FindColorsTolerance(tpa, bcolor, box.X1, box.Y1, box.X2, box.Y2, 10);
  if (Length(tpa) * 100 / Length(TPAFromBox(box))) > percent then
  begin
    txt := GetNumbers(GetTextAtEx(box.X1 - 5, box.Y1 - 5, box.X2 + 5, box.Y2 + 5, 0, 5, 0, color, 10, 'UpChars07'));
    if length(txt) > 0 then
    begin
      result := StrToInt(GetNumbers(txt));
    end;
  end;
  //WriteLn('world number info : ' + toStr(box) + ' , [' + toStr(color) + ',' + toStr(bcolor) + ',' + toStr(percent) + '] , [' + toStr((Length(tpa) * 100 / Length(TPAFromBox(box)))) + ' => ' + toStr(result) + ']');
end;


(*
GetWorldNumbers
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure GetWorldNumbers;

Get the world numbers

.. note::

    by sam

Example:

  .. code-block:: pascal
*)
function GetWorldNumbers(boxes : TBoxArray; colors: Array of TWorldColor) : Array of TWorldColor;
var
  bL,tL,i,j,w: Integer;
  tc: TWorldColor;
  tb: TBox;
begin
  tL := Length(colors) -1;
  bL := Length(boxes);
  setLength(result, bL);
  for i := 0 to (bL - 1) do
  begin
    tb := boxes[i];
    for j := 0 to tL do
    begin
      tc := colors[j];
      w := GetWorldNumber(tb, tc.color, tc.bcolor, tc.percent);
      if w > 0 then
      begin
        result[i].group := tc.group;
        result[i].number := w;
        result[i].box := tb;
        result[i].color := tc.color;
        result[i].bcolor := tc.bcolor;
        result[i].percent := tc.percent;
        break;
      end;
    end;
  end;
  //WriteLn('worlds total : ' + toStr(length(Result)) + ', worlds numbers info : ' + toStr(Result));
end;

procedure WorldReader(var w: TIntegerArray; var wb : TBoxArray; groups : TStringArray; excludes: TIntegerArray = []);
var
  b: Boolean;
  i,j, k: Integer;
  sc: String;
  wr: TIntegerArray;
begin
  wr := strToIntArray(ReadINI(WORLD_DAT_MAIN, 'world', WORLD_DAT));
  //WriteLn('worlds total : ' + toStr(length(wr)) + ', worlds numbers info : ' + toStr(wr) + ', excludes : ' + toStr(excludes));
  //
  setLength(w, Length(wr));
  setLength(wb, Length(wr));
  //
  for i := 0 to High(wr) do
  begin
    //
    b := (wr[i] > 0);
    if b then
    begin
      for k := 0 to High(excludes) do
      begin
        if excludes[k] = wr[i] then
        begin
          b := false;
          break;
        end;
      end;
    end;
    //
    if b then
    begin
      sc := toStr(wr[i]);
      if isStrInArr(ReadINI(sc, 'group', WORLD_DAT), false, groups) then
      begin
        w[j] := wr[i];
        wb[j] := intToBox(strToInt(ReadINI(sc, 'x1', WORLD_DAT)), strToInt(ReadINI(sc, 'y1', WORLD_DAT)), strToInt(ReadINI(sc, 'x2', WORLD_DAT)), strToInt(ReadINI(sc, 'y2', WORLD_DAT)));
        j := j + 1;
      end;
    end;
  end;
  setLength(w, j);
  setLength(wb, j);
end;

(*
IsWorldFull
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function IsWorldFull;

Check world is full

.. note::

    by sam

Example:

  .. code-block:: pascal
*)
function IsWorldFull(tb : TBox) : Boolean;
var
  txt: String;
begin
  txt := GetTextAtExWrap(tb.x1, tb.y1, tb.x2, tb.y2, 0, 4, 2, clWhite, 10, 'StatChars07');
  result:= arrinstr(['FULL','ENLL','FNLL','EULL'],txt);
  //WriteLn('world stats : ' + toStr(txt) + ', full : ' + toStr(result));
end;

(*
QuickWorldScreen
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function QuickWorldScreen;

.. note::

    by sam

Example:

  .. code-block:: pascal
*)
function QuickWorldScreen(): Boolean;
var
  x, y: Integer;
begin
  result := FindTextEx(x, y, ['Current world', 'Loading'], [UpChars07], 555, 205, 710, 225);
end;

(*
QuickWorldClose
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function QuickWorldClose;

.. note::

    by sam

Example:

  .. code-block:: pascal
*)
function QuickWorldClose(): Boolean;
begin
  if QuickWorldScreen then
  begin
    Mouse(725, 215, 2, 2, mouse_left);
    repeat
      wat(50, 100);
    until not QuickWorldScreen;
  end;
  result := True;
end;
